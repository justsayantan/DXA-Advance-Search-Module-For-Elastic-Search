<?xml version="1.0" encoding="UTF-8"?><Configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="11.1" xsi:noNamespaceSchemaLocation="schemas/cd_storage_conf.xsd">
    <!--Optional:-->
    <!--
        Default Namespace Configuration
        The parameter to determine the default namespace
        'tcm' - Tridion Sites
    -->
    <Namespace default="tcm"/>
    <Global>
        <!--Optional:-->
        <ObjectCache Enabled="false">
            <!--Optional:-->
            <Policy Class="com.tridion.cache.LRUPolicy" Type="LRU">
                <!--
                    The maximum size of memory used by the cache. The string must consist a number
                    followed by units: "k" or "kb" for kilobytes; "m" or "mb" for megabytes (case insensitive)
                -->
                <Param Name="MemSize" Value="16mb"/>
            </Policy>
            <!--Optional:-->
            <!-- The Features element specifies classes that add additional functionality to the cache. -->
            <Features>
                <Feature Class="com.tridion.cache.DependencyTracker" Type="DependencyTracker"/>
            </Features>
            <!--Optional:-->
            <!--
                    The optional RemoteSynchronization element specifies a remote Cache Channel Service.
                    The remote Cache Channel Service is used to send messages between caches that are running
                    on separate virtual machines. (For example, if the Broker and the Deployer run on separate
                    virtual machines.)
                    The Cache Channel Service must be running and listening on the configured host and port for
                    remote synchronization to function.
                    If this element is omitted, the cache does not use any inter-virtual machine cache communication.
                    You must use the RemoteSynchronization element in conjunction with the Cache Channel service in
                    order for objects to be updated or removed from the Broker's object cache when they are published
                    or unpublished using the Deployer.
            -->
            <!-- RMI CacheChannel Connector example

              <RemoteSynchronization Queuesize="128" ServiceMonitorInterval="10000"
                  FlushCacheDuringDisconnectInterval="20000">

                  <Connector Class="com.tridion.cache.RMICacheChannelConnector" Host="127.0.0.1" Port="1099" />
              </RemoteSynchronization>
              -->
            <!-- JMS CacheChannel Connector example

              <RemoteSynchronization Queuesize="128" ServiceMonitorInterval="10000"
                  FlushCacheDuringDisconnectInterval="20000">

                  <Connector Class="com.tridion.cache.JMSCacheChannelConnector" Topic="topicName"
                      TopicConnectionFactory="jndiNameOfConnectionFactory"/>
              </RemoteSynchronization>
              -->
        </ObjectCache>
        <Storages>
            <StorageBindings>
                <!--  SI4T -->
                <Bundle src="SearchDAOBundle.xml"/>
            </StorageBindings>
            <!--
                Optional: Wrappers enhances the behaviour of DAOs for specific use cases.
            -->
            <!--
                <Wrappers>
            -->
            <!--
            Optional:
                Wrapper definition for StorageLayer wrapping.
                This element has the following attributes:
                    Name               The bean wrapper name.
            -->
            <!--
                    <Wrapper Name="WrapperName"></Wrapper>
            -->
            <!--
                In order to allow storing of the session data a mechanism should be in place to support storing and
                retrieving data in a specific user session.
             -->
            <!-- MS SQL Sample for undo. -->
            <!--
               <Wrapper Name="UndoWrapper">
                   <Timeout>60000</Timeout>
                   <Storage Type="persistence" Id="undodb-ms"  dialect="MSSQL"
                        Class="com.tridion.storage.persistence.JPADAOFactory">

                        <Pool Type="jdbc" Size="10" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120" />
                        <DataSource Class="com.microsoft.sqlserver.jdbc.SQLServerDataSource">
                            <Property Name="serverName" Value="SERVER_NAME" />
                            <Property Name="portNumber" Value="1433" />
                            <Property Name="databaseName" Value="DATABASE_NAME" />
                            <Property Name="user" Value="USER_NAME" />
                            <Property Name="password" Value="PASSWORD" />
                        </DataSource>
                    </Storage>
                </Wrapper>
            -->
            <!-- Oracle Sample for undo. -->
            <!--
               <Wrapper Name="UndoWrapper">
                   <Timeout>60000</Timeout>
                   <Storage Type="persistence" Id="undodb-ora" dialect="ORACLESQL"
                             Class="com.tridion.storage.persistence.JPADAOFactory">
                        <Pool Type="jdbc" Size="5" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120"/>
                        <DataSource Class="oracle.jdbc.pool.OracleDataSource">
                            <Property Name="driverType" Value="thin"/>
                            <Property Name="networkProtocol" Value="tcp"/>
                            <Property Name="serverName" Value="SERVER_NAME"/>
                            <Property Name="portNumber" Value="1521"/>
                            <Property Name="databaseName" Value="DATABASE_NAME"/>
                            <Property Name="user" Value="USER_NAME"/>
                            <Property Name="password" Value="PASSWORD"/>
                        </DataSource>
                   </Storage>
                </Wrapper>
            -->
            <!--
                </Wrappers>
            -->
            <Storage Class="com.tridion.storage.si4t.JPASearchDAOFactory" Id="defaultdb" Type="persistence" dialect="MSSQL">
                <Pool CheckoutTimeout="120" IdleTimeout="120" MonitorInterval="60" Size="10" Type="jdbc"/>
                <DataSource Class="com.microsoft.sqlserver.jdbc.SQLServerDataSource">
                    <Property Name="serverName" Value="SBASU01"/>
                    <Property Name="portNumber" Value="1433"/>
                    <Property Name="databaseName" Value="Tridion_Broker"/>
                    <Property Name="user" Value="TridionBrokerUser"/>
                    <Property Name="password" Value="P@ssw0rd"/>
                </DataSource>
                <Indexer Class="org.si4t.elastic.ElasticSearchIndexer" DocExtensions="txt" documentEndpoint="http://localhost:9200/" indexName="tridion" indexType="" password="" user="">
                    <DocsBinary Type=".pdf,.docx,.doc,.xlsx,.xls,.ppt,.pptx,.oft,.zip"/>
                </Indexer>
            </Storage>
            <!--
                Configuration example for Oracle 11 and Oracle 12.

                The DataSource element specifies the class name of the DataSource to use
                    and properties specific to the datasource.

                For the Oracle driver the minimum set of properties to set are:
                    driverType: set to value "thin". Indicates the type of driver to use,
                        by using "thin" no oracle client installation is required.
                    networkProtocol: "tcp". Indicates TCP/IP will be used for connectivity.
                    serverName: name of the server that hosts the database
                    portNumber: port number (default 1521) used for TCP/IP connections to the database.
                    databaseName: name of the database to access
                    userName: username used to access the database
                    password: password used to access the database

            <Storage Type="persistence" Id="defaultdb2" dialect="ORACLESQL"
                Class="com.tridion.storage.persistence.JPADAOFactory">

                <Pool Type="jdbc" Size="10" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120" />
                <DataSource Class="oracle.jdbc.pool.OracleDataSource">
                    <Property Name="driverType" Value="thin"/>
                    <Property Name="networkProtocol" Value="tcp"/>
                    <Property Name="serverName" Value="SERVER_NAME"/>
                    <Property Name="portNumber" Value="1521"/>
                    <Property Name="databaseName" Value="DATABASE_NAME"/>
                    <Property Name="user" Value="USER_NAME"/>
                    <Property Name="password" Value="PASSWORD"/>
                </DataSource>
            </Storage>
            -->
            <!--
                 Configuration example of Storage where some values are parameterized.

                 Usage: parameters are specified in form of "${parameter_name}".
                 Then the parameters might be specified either as operating system environment variables before running
                 service or as arguments to bash/powershell script in form of "-Dparameter_name=parameter_value"

            <Storage Type="persistence" Id="defaultdb" dialect="${dbdialect}"
                     Class="com.tridion.storage.persistence.JPADAOFactory">
                <Pool Type="jdbc" Size="5" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120"/>
                <DataSource Class="${dbclass}">
                    <Property Name="serverName" Value="${dbhost}"/>
                    <Property Name="portNumber" Value="${dbport}"/>
                    <Property Name="databaseName" Value="${dbname}"/>
                    <Property Name="user" Value="${dbuser}"/>
                    <Property Name="password" Value="${dbpassword}"/>
                </DataSource>
            </Storage>
            -->
            <!--
                Configuration example for using a old style compatible JDBC Driver datasources.

                <Storage Type="persistence" Class="com.tridion.storage.persistence.JPADAOFactory" dialect="MSSQL"
                    Id="defaultdb3" Url="JDBC_URL_CONNECTION_STRING" Username="USERNAME" Password="PASSWORD"
                    Driver="DRIVER_CLASS">

                    <Pool Type="jdbc2" Size="10" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120"/>
                </Storage>
            -->
            <!--  Configuration example for using filesystem as data storage. -->
            <!--<Storage Type="filesystem" Class="com.tridion.storage.filesystem.FSDAOFactory" Id="defaultFile"
                     defaultFilesystem="false">
                <Root Path="${rootPath}"/>
            </Storage>
            <Storage Type="filesystem" Class="com.tridion.storage.filesystem.FSDAOFactory" Id="defaultDataFile"
                     defaultFilesystem="true" defaultStorage="true">
                <Root Path="${rootPath}/data"/>
            </Storage>-->
        </Storages>
        <Transaction MonitorInterval="${transactionmonitorinterval:-5000}" Timeout="${transactiontimeout:-600000}"/>
    </Global>
    <ItemTypes cached="false" defaultStorageId="defaultdb">
        <!--
            Query type mapping is replacement for Query generator.
            If query generator was defined in a Broker configuration, Query type mapping should be bind to default DB.
        -->
        <!-- <Item typeMapping="Query" storageId="defaultdb"/> -->
        <!--Optional:-->
        <!-- If no item type mappings are defined within ItemTypes or if storages on a lower level do not exist
             then the storage defined by defaultStorageId attribute will be used.
             If storage defined by defaultStorageId does not exist then exception will be thrown.
        -->
        <!--
            <Item typeMapping="Binary" itemExtension=".pdf" storageId="defaultFile" cached="true"/>
            <Item typeMapping="Binary" itemExtension=".iso" storageId="defaultFile" cached="false"/>
            <Item typeMapping="ComponentLinkClick" cached="true" storageId="defaultFile"/>
            <Item typeMapping="Metadata" cached="true" storageId="defaultFile"/>
            <Item typeMapping="ComponentVisit" cached="true" storageId="defaultFile"/>
            <Item typeMapping="DynamicLinkInfo" cached="true" storageId="defaultFile"/>

            <Item typeMapping="Page" cached="false" storageId="defaultFile"/>

            <Item typeMapping="Personalization" cached="true" storageId="defaultdb"/>
            <Item typeMapping="Taxonomy" cached="true" storageId="defaultdb"/>
            <Item typeMapping="Timeframe" cached="true" storageId="defaultFile"/>
            <Item typeMapping="TrackedPage" cached="true" storageId="defaultFile"/>
            <Item typeMapping="XSLT" cached="true" storageId="defaultFile"/>
            <Item typeMapping="ExtensionData" cached="true" storageId="defaultdb"/>
        -->
        <!--Optional:-->
        <!--
            If the publication is defined and storage defined by defaultStorageId is the existing one,
                that one will be used for that publication unless it is overwritten on a lower level.

            If storage defined by storageId does not exist,
                then default storage defined by ItemTypes element will be used
                unless lower level type mappings are not matched.
        -->
        <!--
                <Publication Id="1" defaultStorageId="defaultFile" cached="false">
        -->
        <!--Optional:-->
        <!--
            If there is a type mapping match and storage is defined for storageId then that storage will be used.
            Otherwise; first storage defined within publication element will be referenced,
                and if that one does not exist then the storage from Item elements will be referenced.
                and at the end storage defined within ItemTypes will be used.
        -->
        <!--
                    <Item typeMapping="ComponentPresentation" itemExtension=".Jsp" storageId="defaultFile"/>
                    <Item typeMapping="ComponentPresentation" itemExtension=".Asp" storageId="defaultFile"/>
                    <Item typeMapping="ComponentPresentation" itemExtension=".Xml" storageId="defaultFile"/>
                    <Item typeMapping="ComponentPresentation" itemExtension=".Txt" storageId="defaultFile"/>
                    <Item typeMapping="Metadata" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="Binary" itemExtension=".pdf" storageId="defaultFile" cached="true"/>
                    <Item typeMapping="Binary" itemExtension=".iso" storageId="defaultFile" cached="false"/>
                    <Item typeMapping="ComponentLinkClick" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="ComponentVisit" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="DynamicLinkInfo" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="Page" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="Personalization" cached="true" storageId="defaultdb"/>
                    <Item typeMapping="Taxonomy" cached="true" storageId="defaultdb"/>
                    <Item typeMapping="Timeframe" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="TrackedPage" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="XSLT" cached="true" storageId="defaultFile"/>
                    <Item typeMapping="ExtensionData" cached="true" storageId="defaultdb"/>
        -->
        <!--
                </Publication>
        -->
    </ItemTypes>
    <ConfigRepository CacheEnabled="true" CacheExpirationDuration="600" ClientId="registration" ClientSecret="${registrationpassword:-encrypted:HzfQh9wYwAKShDxCm4DnnBnysAz9PtbDMFXMbPszSVY=}" ConnectionTimeout="10000" ServiceMonitorPollDuration="10" ServiceUri="http://localhost:8082/discovery.svc" TokenServiceUrl="http://10.0.130.247:8082/token.svc">
        <Roles>
            <Role Name="DeployerCapability" Url="http://10.0.130.247:8084/v2">
                <Property Name="encoding" Value="UTF-8"/>
            </Role>
        </Roles>
    </ConfigRepository>
</Configuration>